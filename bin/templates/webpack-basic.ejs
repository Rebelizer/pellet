#!/usr/bin/env node

var path = require('path')
  , util = require('util');

// because the envirment is unknown when running as a command line utility we try the local require version
// first then fallback to our pellet npm version (this will be in the node_modules holding pellet) this is
// helpful because the local node_modules will not need to have all the loaders/modules for webpack installed
// i.e. cjsx, styl, coffee, etc.
try {var react = require('react');} catch(ex) {react = require.resolve('pellet/node_modules/react');}
try {var webpack = require('webpack');} catch(ex) {webpack = require('pellet/node_modules/webpack');}
try {var pelletPath = path.join(require.resolve('pellet'), '..', 'node_modules');} catch(ex) {pelletPath = '';}

var config = {
  bail: true,
  cache: true,
  profile: true,
  devtool: '#inline-source-map',
  entry: <%- _util.inspect(webpackEP) %>,
  plugins: [
    new webpack.optimize.CommonsChunkPlugin(),
    //new webpack.optimize.CommonsChunkPlugin('main.js', ['style', 'app']),
    new webpack.optimize.DedupePlugin(),
  ],
  resolveLoader: {
    modulesDirectories: ["node_modules", "bower_components"]
  },
  module: {
    unknownContextCritical: false,
    loaders: [
      { test: /\.json/, loader: 'json' },
      { test: /\.jsx/, loader: 'jsx' },
      { test: /\.cjsx/, loader: 'coffee!cjsx' },
      { test: /\.styl$/, loader: 'style!css!autoprefixer!stylus' },
      { test: /\.less$/, loader: 'style!css!autoprefixer!less' },
      { test: /\.css$/, loader: 'style!css!autoprefixer' },
      { test: /\.coffee/, loader: 'coffee' }
    ]
  }
};

var browserConfig = Object.create(config);
var nodeConfig = Object.create(config);

browserConfig.target = 'web';
browserConfig.output = {
  path: path.resolve(__dirname, '<%- _outputBrowser %>'),
  filename: '[name].js',
  chunkFilename: "[chunkhash].js"
};

nodeConfig.target = 'node';
nodeConfig.output = {
  path: path.resolve(__dirname, '<%- _outputServer %>'),
  filename: '[name].js',
  chunkFilename: "[chunkhash].js"
};

var exports = module.exports = {
  nodeConfig: nodeConfig,
  browserConfig: browserConfig,

  watch: function(nodeConfig, browserConfig, options) {
    if(!options) {
      options = {}
    }

    options.runFn = 'run';

    exports.exec(nodeConfig, browserConfig, options);
  },

  build: function(nodeConfig, browserConfig, options) {
    if(!options) {
      options = {}
    }

    options.runFn = 'watch';

    exports.exec(nodeConfig, browserConfig, options);
  },

  exec: function(nodeConfig, browserConfig, options) {
    if(!options) {
      options = {};
    }

    options.watchInterval = options.watchInterval || 100;
    options.cb = options.cb || function(err, info) {
      if(err) {
        console.error('Error packing:', err.message || err);
      } else if(info && !options.silent) {
        console.log(info.toString());
      } else if(!options.silent) {
        console.log('Ignored');
      }
    };

    if(nodeConfig) {
      webpack(nodeConfig).watch(options.watchInterval, options.cb);
    }

    if(browserConfig) {
      webpack(nodeConfig).watch(options.watchInterval, options.cb);
    }
  }
}

// bootstap webpack if run as a command
if(process.argv[1] == __filename) {

  // because the envirment is unknown we add paths to find webpack modules/loaders
  // and the path to the node_modules used while packing the file
  config.resolveLoader.root = [__dirname, pelletPath];

  module.exports.watch(module.exports.nodeConfig, module.exports.browserConfig);
}